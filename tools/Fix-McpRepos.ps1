<#
.SYNOPSIS
    Applies Markdown formatting and sets up pre-commit hooks for MCP repositories.
.DESCRIPTION
    This script will:
    1. Run the Markdown fixer on specified MCP repositories
    2. Set up pre-commit hooks to automatically fix Markdown files before each commit
.PARAMETER ReposPath
    The directory containing MCP repositories (default: parent of current directory)
.PARAMETER SkipFix
    Skip running the Markdown fixer (only set up hooks)
.PARAMETER SkipHooks
    Skip setting up pre-commit hooks (only run the fixer)
#>

param(
    [string]$ReposPath = (Split-Path -Parent $PSScriptRoot),
    [switch]$SkipFix,
    [switch]$SkipHooks
)

# Import the Markdown fixer script
$markdownFixerPath = Join-Path $PSScriptRoot "FixMarkdown.ps1"
. $markdownFixerPath

# List of known MCP repositories
$mcpRepos = @(
    "D:\Dev\repos\avatarmcp",
    "D:\Dev\repos\basic-memory",
    "D:\Dev\repos\beyondcomparemcp",
    "D:\Dev\repos\calibremcp",
    "D:\Dev\repos\dockermcp",
    "D:\Dev\repos\eniac-mcp",
    "D:\Dev\repos\eniacmcp",
    "D:\Dev\repos\fastsearch-mcp",
    "D:\Dev\repos\filesystem-mcp",
    "D:\Dev\repos\filesystem-mcp-server",
    "D:\Dev\repos\grandorguemcp",
    "D:\Dev\repos\gtfs-mcp",
    "D:\Dev\repos\handbrakemcp",
    "D:\Dev\repos\hasleo-backup-mcp",
    "D:\Dev\repos\immichmcp",
    "D:\Dev\repos\local-llm-mcp",
    "D:\Dev\repos\mcp-collection",
    "D:\Dev\repos\mcp-filesystem",
    "D:\Dev\repos\miniclaude",
    "D:\Dev\repos\notionmcp",
    "D:\Dev\repos\obsidianmcp",
    "D:\Dev\repos\oscmcp",
    "D:\Dev\repos\plexmcp",
    "D:\Dev\repos\pywinauto-mcp",
    "D:\Dev\repos\qbtmcp",
    "D:\Dev\repos\reaper-mcp",
    "D:\Dev\repos\rustdeskmcp",
    "D:\Dev\repos\sandra-docker-mcp",
    "D:\Dev\repos\sqlitemcp",
    "D:\Dev\repos\system-admin-mcp",
    "D:\Dev\repos\tailscalemcp",
    "D:\Dev\repos\tvtropes-mcp",
    "D:\Dev\repos\vboxmcp",
    "D:\Dev\repos\vroidstudio-mcp",
    "D:\Dev\repos\winrarmcp"
) | Where-Object { Test-Path $_ }

Write-Host "Found $($mcpRepos.Count) MCP repositories:" -ForegroundColor Cyan
$mcpRepos | ForEach-Object { Write-Host "- $_" }

# Process each repository
$filesProcessed = 0
$filesUpdated = 0
$reposProcessed = 0
$reposUpdated = 0

foreach ($repo in $mcpRepos) {
    $repoName = Split-Path $repo -Leaf
    Write-Host "`nProcessing repository: $repoName" -ForegroundColor Green
    $repoUpdated = $false
    
    # 1. Run Markdown fixer if not skipped
    if (-not $SkipFix) {
        Write-Host "  Running Markdown fixer..." -ForegroundColor Cyan
        $result = & $markdownFixerPath -Path $repo -ErrorAction SilentlyContinue
        if ($result) {
            $repoUpdated = $true
            $reposUpdated++
        }
    }
    
    # 2. Set up pre-commit hook if not skipped
    if (-not $SkipHooks) {
        $hooksDir = Join-Path $repo ".git\hooks"
        $preCommitHookPath = Join-Path $hooksDir "pre-commit"
        
        # Create hooks directory if it doesn't exist
        if (-not (Test-Path $hooksDir)) {
            New-Item -ItemType Directory -Path $hooksDir -Force | Out-Null
        }
        
        # Create or update pre-commit hook
        @"
#!/usr/bin/env pwsh

# Auto-generated by Fix-McpRepos.ps1
# Fixes Markdown files before commit

# Get the repository root directory
`$repoRoot = git rev-parse --show-toplevel
`$fixerPath = "$markdownFixerPath"

# Only run if the fixer exists
if (Test-Path `$fixerPath) {
    # Run the fixer on the repository root
    & "`$fixerPath" -Path "`$repoRoot"
    
    # Stage any changes made by the fixer
    `$changedFiles = git diff --name-only --diff-filter=ACMRTUXB | Where-Object { `$_ -match '\.md$|\\.markdown$' }
    if (`$changedFiles) {
        git add `$changedFiles
        Write-Host "Markdown files were automatically fixed. Please review and commit again." -ForegroundColor Yellow
        exit 1
    }
}

# Continue with the commit
Exit 0
"@ | Out-File -FilePath $preCommitHookPath -Encoding ascii -Force

        # Make the hook executable on Unix-like systems
        if (Test-Path /usr/bin/env) {
            & chmod +x $preCommitHookPath
        }
        
        Write-Host "  Pre-commit hook installed at: $preCommitHookPath" -ForegroundColor Green
    }
    
    $reposProcessed++
}

# Display summary
Write-Host "`nProcessing complete!" -ForegroundColor Green
Write-Host "- Repositories processed: $reposProcessed" -ForegroundColor Cyan
Write-Host "- Repositories updated: $reposUpdated" -ForegroundColor Cyan
if (-not $SkipHooks) {
    Write-Host "- Pre-commit hooks installed in all repositories" -ForegroundColor Cyan
}

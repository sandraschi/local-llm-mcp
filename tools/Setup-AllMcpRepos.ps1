<#
.SYNOPSIS
    Sets up Markdown formatting and pre-commit hooks across all MCP repositories.
.DESCRIPTION
    This script will:
    1. Find all MCP repositories in the parent directory
    2. Run the Markdown fixer on each repository
    3. Set up a pre-commit hook to automatically fix Markdown files before each commit
.PARAMETER BasePath
    The base directory containing MCP repositories (default: parent of current directory)
.PARAMETER SkipFix
    Skip running the Markdown fixer (only set up hooks)
.PARAMETER SkipHooks
    Skip setting up pre-commit hooks (only run the fixer)
#>

param(
    [string]$BasePath = (Split-Path -Parent $PSScriptRoot),
    [switch]$SkipFix,
    [switch]$SkipHooks
)

# Import the Markdown fixer script
$markdownFixerPath = Join-Path $PSScriptRoot "FixMarkdown.ps1"
. $markdownFixerPath

# Debug: Show base path being searched
Write-Host "`nSearching for Git repositories in: $BasePath" -ForegroundColor Cyan

# Find all Git repositories in the base path and its subdirectories
$gitRepos = @()
$directories = Get-ChildItem -Path $BasePath -Directory -Recurse -Force -ErrorAction SilentlyContinue -Depth 3

Write-Host "Found $($directories.Count) directories to check" -ForegroundColor Cyan

$directories | ForEach-Object {
    $gitDir = Join-Path $_.FullName ".git"
    if (Test-Path $gitDir -PathType Container) {
        $gitRepos += $_.FullName
        Write-Host "Found Git repository: $($_.FullName)" -ForegroundColor DarkGray
    }
}

Write-Host "`nFound $($gitRepos.Count) Git repositories in total" -ForegroundColor Cyan

# Filter for MCP-related repositories
$mcpRepos = $gitRepos | Where-Object {
    $repoName = Split-Path $_ -Leaf
    $isMcpRepo = $false
    
    # Check for MCP-related patterns in the repository name
    $patterns = @('mcp', 'handbrake', 'llm', 'plex', 'qbittorrent', 'rustdesk', 'eniac', 'miniclaude', 'grandorgue', 'nexus')
    foreach ($pattern in $patterns) {
        if ($repoName -match $pattern) {
            $isMcpRepo = $true
            Write-Host "Matched MCP repository by name ($pattern): $_" -ForegroundColor Green
            break
        }
    }
    
    # Check for MCP-related directories
    if (-not $isMcpRepo) {
        $mcpDirs = @('mcp', 'MCP', 'handbrake-mcp', 'llm-mcp')
        foreach ($mcpDir in $mcpDirs) {
            if (Test-Path (Join-Path $_ $mcpDir)) {
                $isMcpRepo = $true
                Write-Host "Matched MCP repository by directory ($mcpDir): $_" -ForegroundColor Green
                break
            }
        }
    }
    
    $isMcpRepo
} | Sort-Object -Unique

Write-Host "Found $($mcpRepos.Count) MCP repositories:" -ForegroundColor Cyan
$mcpRepos | ForEach-Object { Write-Host "- $_" }

# Process each repository
foreach ($repo in $mcpRepos) {
    $repoName = Split-Path $repo -Leaf
    Write-Host "`nProcessing repository: $repoName" -ForegroundColor Green
    
    # 1. Run Markdown fixer if not skipped
    if (-not $SkipFix) {
        Write-Host "  Running Markdown fixer..." -ForegroundColor Cyan
        & $markdownFixerPath -Path $repo -ErrorAction SilentlyContinue
    }
    
    # 2. Set up pre-commit hook if not skipped
    if (-not $SkipHooks) {
        $hooksDir = Join-Path $repo ".git\hooks"
        $preCommitHookPath = Join-Path $hooksDir "pre-commit"
        $relativeScriptPath = Resolve-Path -Relative $markdownFixerPath -RelativeBasePath $repo
        
        # Create hooks directory if it doesn't exist
        if (-not (Test-Path $hooksDir)) {
            New-Item -ItemType Directory -Path $hooksDir -Force | Out-Null
        }
        
        # Create or update pre-commit hook
        @"
#!/usr/bin/env pwsh

# Auto-generated by Setup-AllMcpRepos.ps1
# Fixes Markdown files before commit

# Get the repository root directory
`$repoRoot = git rev-parse --show-toplevel

# Run the Markdown fixer on staged Markdown files
`$changedFiles = git diff --cached --name-only --diff-filter=ACMRTUXB | Where-Object { `$_ -match '\.md$|\\.markdown$' }

if (`$changedFiles) {
    Write-Host "Fixing Markdown formatting in staged files..." -ForegroundColor Cyan
    
    # Run the fixer on the repository root to handle all Markdown files
    & "`$PSScriptRoot\..\..$relativeScriptPath" -Path "`$repoRoot"
    
    # Stage the fixed files
    git add `$changedFiles
    
    # Check if there are any changes to commit
    `$status = git status --porcelain
    if (`$status) {
        Write-Host "Markdown files were automatically fixed. Please review and commit again." -ForegroundColor Yellow
        exit 1
    }
}

# Continue with the commit
Exit 0
"@ | Out-File -FilePath $preCommitHookPath -Encoding ascii -Force

        # Make the hook executable on Unix-like systems
        if (Test-Path /usr/bin/env) {
            & chmod +x $preCommitHookPath
        }
        
        Write-Host "  Pre-commit hook installed at: $preCommitHookPath" -ForegroundColor Green
    }
}

Write-Host "`nSetup complete!" -ForegroundColor Green
if (-not $SkipHooks) {
    Write-Host "Pre-commit hooks have been installed to automatically fix Markdown files before each commit." -ForegroundColor Cyan
}
if (-not $SkipFix) {
    Write-Host "Markdown fixer has been run on all repositories." -ForegroundColor Cyan
}
